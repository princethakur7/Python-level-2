import datetime
from typing import List, Dict, Optional, Tuple
import bisect


class Book:
    """
    Represents a book in the library system.
    Uses __slots__ for memory efficiency.
    """
    __slots__ = ['book_id', 'title', 'author', 'isbn', 'category', 'publication_year', 
                 'copies_total', 'copies_available', 'date_added']
    
    def __init__(self, book_id: int, title: str, author: str, isbn: str, 
                 category: str, publication_year: int, copies: int = 1):
        self.book_id = book_id
        self.title = title.strip()
        self.author = author.strip()
        self.isbn = isbn.strip()
        self.category = category.strip()
        self.publication_year = publication_year
        self.copies_total = copies
        self.copies_available = copies
        self.date_added = datetime.datetime.now()
    
    def __str__(self) -> str:
        return (f"ID: {self.book_id} | {self.title} by {self.author} | "
                f"ISBN: {self.isbn} | Available: {self.copies_available}/{self.copies_total}")
    
    def __repr__(self) -> str:
        return f"Book(id={self.book_id}, title='{self.title}', author='{self.author}')"


class Member:
    """
    Represents a library member.
    Uses __slots__ for memory efficiency.
    """
    __slots__ = ['member_id', 'name', 'email', 'phone', 'join_date', 'borrowed_books', 'fine_amount']
    
    def __init__(self, member_id: int, name: str, email: str, phone: str):
        self.member_id = member_id
        self.name = name.strip()
        self.email = email.strip()
        self.phone = phone.strip()
        self.join_date = datetime.datetime.now()
        self.borrowed_books = []  # List of (book_id, borrow_date, due_date)
        self.fine_amount = 0.0
    
    def __str__(self) -> str:
        return (f"ID: {self.member_id} | {self.name} | {self.email} | "
                f"Books: {len(self.borrowed_books)} | Fine: ${self.fine_amount:.2f}")


class Transaction:
    """
    Represents a book transaction (borrow/return).
    Uses __slots__ for memory efficiency.
    """
    __slots__ = ['transaction_id', 'member_id', 'book_id', 'transaction_type', 
                 'transaction_date', 'due_date', 'return_date', 'fine_paid']
    
    def __init__(self, transaction_id: int, member_id: int, book_id: int, 
                 transaction_type: str, due_date: datetime.datetime = None):
        self.transaction_id = transaction_id
        self.member_id = member_id
        self.book_id = book_id
        self.transaction_type = transaction_type  # 'BORROW' or 'RETURN'
        self.transaction_date = datetime.datetime.now()
        self.due_date = due_date
        self.return_date = None
        self.fine_paid = 0.0


class LibraryManagementSystem:
    """
    Advanced Library Management System with efficient data structures and algorithms.
    """
    
    def __init__(self):
        # Primary storage arrays
        self.books: List[Book] = []
        self.members: List[Member] = []
        self.transactions: List[Transaction] = []
        
        # Hash maps for O(1) lookups - memory vs time tradeoff
        self.book_id_index: Dict[int, int] = {}  # book_id -> array index
        self.member_id_index: Dict[int, int] = {}  # member_id -> array index
        self.isbn_index: Dict[str, int] = {}  # isbn -> book array index
        
        # Sorted arrays for binary search - O(log n) search
        self.books_by_title: List[Tuple[str, int]] = []  # (title_lower, book_id)
        self.books_by_author: List[Tuple[str, int]] = []  # (author_lower, book_id)
        
        # Category index for filtering
        self.category_index: Dict[str, List[int]] = {}  # category -> [book_ids]
        
        # System counters
        self.next_book_id = 1
        self.next_member_id = 1
        self.next_transaction_id = 1
        
        # Configuration
        self.max_books_per_member = 5
        self.loan_period_days = 14
        self.fine_per_day = 1.0
    
    def _update_book_indices(self, book: Book, array_index: int) -> None:
        """Update all book indices when a new book is added."""
        # Update hash indices
        self.book_id_index[book.book_id] = array_index
        self.isbn_index[book.isbn] = array_index
        
        # Update sorted arrays for binary search
        title_entry = (book.title.lower(), book.book_id)
        author_entry = (book.author.lower(), book.book_id)
        
        bisect.insort(self.books_by_title, title_entry)
        bisect.insort(self.books_by_author, author_entry)
        
        # Update category index
        category = book.category.lower()
        if category not in self.category_index:
            self.category_index[category] = []
        self.category_index[category].append(book.book_id)
    
    def add_book(self, title: str, author: str, isbn: str, category: str, 
                 publication_year: int, copies: int = 1) -> bool:
        """
        Add a new book to the library.
        Time Complexity: O(log n) due to sorted insertions
        Space Complexity: O(1) additional space
        """
        try:
            # Check if ISBN already exists
            if isbn in self.isbn_index:
                # Update existing book's copy count
                existing_index = self.isbn_index[isbn]
                self.books[existing_index].copies_total += copies
                self.books[existing_index].copies_available += copies
                print(f"Updated existing book. Total copies: {self.books[existing_index].copies_total}")
                return True
            
            # Create new book
            book = Book(self.next_book_id, title, author, isbn, category, 
                       publication_year, copies)
            
            # Add to main array
            self.books.append(book)
            array_index = len(self.books) - 1
            
            # Update all indices
            self._update_book_indices(book, array_index)
            
            self.next_book_id += 1
            print(f"Book added successfully: {book}")
            return True
            
        except Exception as e:
            print(f"Error adding book: {e}")
            return False
    
    def add_member(self, name: str, email: str, phone: str) -> bool:
        """
        Add a new member to the library.
        Time Complexity: O(1)
        Space Complexity: O(1)
        """
        try:
            member = Member(self.next_member_id, name, email, phone)
            
            # Add to main array
            self.members.append(member)
            array_index = len(self.members) - 1
            
            # Update index
            self.member_id_index[member.member_id] = array_index
            
            self.next_member_id += 1
            print(f"Member added successfully: {member}")
            return True
            
        except Exception as e:
            print(f"Error adding member: {e}")
            return False
    
    def search_books_by_title(self, title: str) -> List[Book]:
        """
        Search books by title using binary search.
        Time Complexity: O(log n + k) where k is number of matches
        """
        title_lower = title.lower()
        results = []
        
        # Find the first occurrence
        left_idx = bisect.bisect_left(self.books_by_title, (title_lower, 0))
        
        # Collect all matches
        for i in range(left_idx, len(self.books_by_title)):
            stored_title, book_id = self.books_by_title[i]
            if not stored_title.startswith(title_lower):
                break
            
            book_idx = self.book_id_index[book_id]
            results.append(self.books[book_idx])
        
        return results
    
    def search_books_by_author(self, author: str) -> List[Book]:
        """
        Search books by author using binary search.
        Time Complexity: O(log n + k) where k is number of matches
        """
        author_lower = author.lower()
        results = []
        
        # Find the first occurrence
        left_idx = bisect.bisect_left(self.books_by_author, (author_lower, 0))
        
        # Collect all matches
        for i in range(left_idx, len(self.books_by_author)):
            stored_author, book_id = self.books_by_author[i]
            if not stored_author.startswith(author_lower):
                break
            
            book_idx = self.book_id_index[book_id]
            results.append(self.books[book_idx])
        
        return results
    
    def search_books_by_category(self, category: str) -> List[Book]:
        """
        Search books by category using hash index.
        Time Complexity: O(k) where k is number of books in category
        """
        category_lower = category.lower()
        results = []
        
        if category_lower in self.category_index:
            for book_id in self.category_index[category_lower]:
                book_idx = self.book_id_index[book_id]
                results.append(self.books[book_idx])
        
        return results
    
    def get_book_by_id(self, book_id: int) -> Optional[Book]:
        """
        Get book by ID using hash lookup.
        Time Complexity: O(1)
        """
        if book_id in self.book_id_index:
            index = self.book_id_index[book_id]
            return self.books[index]
        return None
    
    def get_member_by_id(self, member_id: int) -> Optional[Member]:
        """
        Get member by ID using hash lookup.
        Time Complexity: O(1)
        """
        if member_id in self.member_id_index:
            index = self.member_id_index[member_id]
            return self.members[index]
        return None
    
    def borrow_book(self, member_id: int, book_id: int) -> bool:
        """
        Process book borrowing with validation.
        Time Complexity: O(1)
        """
        try:
            # Get member and book
            member = self.get_member_by_id(member_id)
            book = self.get_book_by_id(book_id)
            
            if not member:
                print(f"Member with ID {member_id} not found")
                return False
            
            if not book:
                print(f"Book with ID {book_id} not found")
                return False
            
            # Validation checks
            if book.copies_available <= 0:
                print("Book is not available")
                return False
            
            if len(member.borrowed_books) >= self.max_books_per_member:
                print(f"Member has reached maximum borrowing limit ({self.max_books_per_member})")
                return False
            
            # Check if member already has this book
            for borrowed_book_id, _, _ in member.borrowed_books:
                if borrowed_book_id == book_id:
                    print("Member already has this book")
                    return False
            
            # Process borrowing
            borrow_date = datetime.datetime.now()
            due_date = borrow_date + datetime.timedelta(days=self.loan_period_days)
            
            # Update book availability
            book.copies_available -= 1
            
            # Update member's borrowed books
            member.borrowed_books.append((book_id, borrow_date, due_date))
            
            # Create transaction record
            transaction = Transaction(
                self.next_transaction_id, member_id, book_id, 'BORROW', due_date
            )
            self.transactions.append(transaction)
            self.next_transaction_id += 1
            
            print(f"Book borrowed successfully. Due date: {due_date.strftime('%Y-%m-%d')}")
            return True
            
        except Exception as e:
            print(f"Error borrowing book: {e}")
            return False
    
    def return_book(self, member_id: int, book_id: int) -> bool:
        """
        Process book return with fine calculation.
        Time Complexity: O(n) where n is number of borrowed books by member
        """
        try:
            member = self.get_member_by_id(member_id)
            book = self.get_book_by_id(book_id)
            
            if not member or not book:
                print("Member or book not found")
                return False
            
            # Find the borrowed book
            book_found = False
            return_date = datetime.datetime.now()
            fine = 0.0
            
            for i, (borrowed_book_id, borrow_date, due_date) in enumerate(member.borrowed_books):
                if borrowed_book_id == book_id:
                    # Calculate fine if overdue
                    if return_date > due_date:
                        days_overdue = (return_date - due_date).days
                        fine = days_overdue * self.fine_per_day
                        member.fine_amount += fine
                    
                    # Remove from borrowed books
                    member.borrowed_books.pop(i)
                    book_found = True
                    break
            
            if not book_found:
                print("This book is not borrowed by the member")
                return False
            
            # Update book availability
            book.copies_available += 1
            
            # Create return transaction
            transaction = Transaction(
                self.next_transaction_id, member_id, book_id, 'RETURN'
            )
            transaction.return_date = return_date
            transaction.fine_paid = fine
            self.transactions.append(transaction)
            self.next_transaction_id += 1
            
            if fine > 0:
                print(f"Book returned with fine: ${fine:.2f}")
            else:
                print("Book returned successfully")
            
            return True
            
        except Exception as e:
            print(f"Error returning book: {e}")
            return False
    
    def get_overdue_books(self) -> List[Tuple[Member, Book, int]]:
        """
        Get all overdue books with member and days overdue.
        Time Complexity: O(m * b) where m is members, b is avg borrowed books
        """
        overdue_books = []
        current_date = datetime.datetime.now()
        
        for member in self.members:
            for book_id, borrow_date, due_date in member.borrowed_books:
                if current_date > due_date:
                    days_overdue = (current_date - due_date).days
                    book = self.get_book_by_id(book_id)
                    if book:
                        overdue_books.append((member, book, days_overdue))
        
        return overdue_books
    
    def display_all_books(self) -> None:
        """Display all books in the library."""
        if not self.books:
            print("No books in the library")
            return
        
        print(f"\n{'='*80}")
        print(f"{'LIBRARY BOOKS':<80}")
        print(f"{'='*80}")
        
        for book in self.books:
            print(book)
    
    def display_all_members(self) -> None:
        """Display all members."""
        if not self.members:
            print("No members registered")
            return
        
        print(f"\n{'='*80}")
        print(f"{'LIBRARY MEMBERS':<80}")
        print(f"{'='*80}")
        
        for member in self.members:
            print(member)
    
    def display_member_books(self, member_id: int) -> None:
        """Display books borrowed by a specific member."""
        member = self.get_member_by_id(member_id)
        if not member:
            print(f"Member with ID {member_id} not found")
            return
        
        print(f"\nBooks borrowed by {member.name}:")
        if not member.borrowed_books:
            print("No books currently borrowed")
            return
        
        for book_id, borrow_date, due_date in member.borrowed_books:
            book = self.get_book_by_id(book_id)
            if book:
                status = "OVERDUE" if datetime.datetime.now() > due_date else "ON TIME"
                print(f"- {book.title} (Due: {due_date.strftime('%Y-%m-%d')}) [{status}]")
    
    def generate_library_report(self) -> None:
        """Generate comprehensive library statistics."""
        total_books = sum(book.copies_total for book in self.books)
        available_books = sum(book.copies_available for book in self.books)
        borrowed_books = total_books - available_books
        
        total_members = len(self.members)
        active_members = sum(1 for member in self.members if member.borrowed_books)
        
        total_fines = sum(member.fine_amount for member in self.members)
        overdue_count = len(self.get_overdue_books())
        
        print(f"\n{'='*50}")
        print(f"{'LIBRARY MANAGEMENT REPORT':<50}")
        print(f"{'='*50}")
        print(f"Total Books: {total_books}")
        print(f"Available Books: {available_books}")
        print(f"Borrowed Books: {borrowed_books}")
        print(f"Total Members: {total_members}")
        print(f"Active Members: {active_members}")
        print(f"Overdue Books: {overdue_count}")
        print(f"Total Fines: ${total_fines:.2f}")
        print(f"Categories: {len(self.category_index)}")
        print(f"{'='*50}")


def main():
    """
    Main function to demonstrate the library management system.
    """
    # Initialize the library system
    library = LibraryManagementSystem()
    
    # Sample data
    print("Setting up sample library data...")
    
    # Add sample books
    library.add_book("The Great Gatsby", "F. Scott Fitzgerald", "978-0-7432-7356-5", "Fiction", 1925, 3)
    library.add_book("To Kill a Mockingbird", "Harper Lee", "978-0-06-112008-4", "Fiction", 1960, 2)
    library.add_book("Python Programming", "John Smith", "978-1-23456-789-0", "Technology", 2023, 5)
    library.add_book("Data Structures", "Robert Johnson", "978-9-87654-321-0", "Technology", 2022, 4)
    library.add_book("The Catcher in the Rye", "J.D. Salinger", "978-0-316-76948-0", "Fiction", 1951, 2)
    
    # Add sample members
    library.add_member("Alice Johnson", "alice@email.com", "123-456-7890")
    library.add_member("Bob Smith", "bob@email.com", "098-765-4321")
    library.add_member("Carol Davis", "carol@email.com", "555-123-4567")
    
    # Demonstrate system functionality
    print("\n" + "="*60)
    print("LIBRARY MANAGEMENT SYSTEM DEMONSTRATION")
    print("="*60)
    
    # Display all books
    library.display_all_books()
    
    # Search functionality
    print("\n--- Search Results ---")
    print("Books with 'Python' in title:")
    results = library.search_books_by_title("Python")
    for book in results:
        print(f"  {book}")
    
    print("\nBooks by author 'Harper':")
    results = library.search_books_by_author("Harper")
    for book in results:
        print(f"  {book}")
    
    print("\nTechnology books:")
    results = library.search_books_by_category("Technology")
    for book in results:
        print(f"  {book}")
    
    # Borrowing books
    print("\n--- Borrowing Books ---")
    library.borrow_book(1, 1)  # Alice borrows The Great Gatsby
    library.borrow_book(1, 3)  # Alice borrows Python Programming
    library.borrow_book(2, 2)  # Bob borrows To Kill a Mockingbird
    
    # Display member's borrowed books
    print("\n--- Member's Borrowed Books ---")
    library.display_member_books(1)
    
    # Generate report
    library.generate_library_report()
    
    print("\nLibrary Management System demonstration completed!")


if __name__ == "__main__":
    main()
